# Generated by Django 4.2.24 on 2025-10-03 13:05

import django.core.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(error_messages={'unique': 'A participant with that nickname already exists.'}, help_text='Required. 120 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=120, unique=True, validators=[django.core.validators.MinLengthValidator(3, 'Nickname must be at least 3 characters long.'), django.core.validators.RegexValidator(message='Enter a valid nickname. This value may contain only letters, numbers, and @/./+/-/_ characters.', regex='^[\\w.@+-]+\\Z')], verbose_name='Nickname')),
                ('firstname', models.CharField(help_text='Enter your legal first name.', max_length=120, validators=[django.core.validators.MinLengthValidator(2, 'First name must be at least 2 characters long.'), django.core.validators.RegexValidator(message='First name can only contain letters, spaces, hyphens, dots, and apostrophes.', regex="^[a-zA-Z\\s\\-\\.\\']+\\Z")], verbose_name='First Name')),
                ('lastname', models.CharField(help_text='Enter your legal last name.', max_length=120, validators=[django.core.validators.MinLengthValidator(2, 'Last name must be at least 2 characters long.'), django.core.validators.RegexValidator(message='Last name can only contain letters, spaces, hyphens, dots, and apostrophes.', regex="^[a-zA-Z\\s\\-\\.\\']+\\Z")], verbose_name='Last Name')),
                ('position', models.CharField(choices=[('developer', 'Developer'), ('designer', 'Designer'), ('manager', 'Manager'), ('analyst', 'Analyst'), ('researcher', 'Researcher'), ('student', 'Student'), ('professor', 'Professor'), ('other', 'Other')], default='other', help_text='Select your primary role or position.', max_length=120, verbose_name='Position/Role')),
                ('email', models.EmailField(blank=True, help_text='Optional. Your email address for notifications.', max_length=254, null=True, unique=True, verbose_name='Email Address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this participant is active.', verbose_name='Active')),
                ('bio', models.TextField(blank=True, help_text='Optional. Tell us about yourself (max 500 characters).', max_length=500, verbose_name='Biography')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Date Joined')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
            ],
            options={
                'verbose_name': 'Participant',
                'verbose_name_plural': 'Participants',
                'ordering': ['lastname', 'firstname'],
                'indexes': [models.Index(fields=['nickname'], name='participant_nicknam_b2c480_idx'), models.Index(fields=['lastname', 'firstname'], name='participant_lastnam_0aa80b_idx'), models.Index(fields=['position'], name='participant_positio_609529_idx'), models.Index(fields=['is_active'], name='participant_is_acti_4fac63_idx'), models.Index(fields=['date_joined'], name='participant_date_jo_01a621_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='participant',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('firstname', 'lastname'), name='unique_full_name'),
        ),
        migrations.CreateModel(
            name='ActiveParticipant',
            fields=[
            ],
            options={
                'verbose_name': 'Active Participant',
                'verbose_name_plural': 'Active Participants',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('participant.participant',),
        ),
    ]
